#! /usr/bin/env python3
import os
import re
import argparse
import sys
import token
import tokenize
import platform
import operator
import io

from pygyat import VERSION_NUMBER, GYAT2PY_MAPPINGS
from pygyat.logger import Logger


def ends_in_py(word):
    """
    Returns True if word ends in .py, else False

    Args:
        word (str):     Filename to check

    Returns:
        boolean: Whether 'word' ends with 'py' or not
    """
    return word[-3:] == ".py"


def change_file_name(name, outputname=None):
    """
    Changes *.py filenames to *.gyat filenames. If filename does not end in .py,
    it adds .gyat to the end.

    Args:
        name (str):         Filename to edit
        outputname (str):   Optional. Overrides result of function.

    Returns:
        str: Resulting filename with *.gyat at the end (unless 'outputname' is
        specified, then that is returned).
    """
    # If outputname is specified, return that
    if outputname is not None:
        return outputname

    # Otherwise, create a new name
    if ends_in_py(name):
        return name[:-3] + ".gyat"
    else:
        return name + ".gyat"


def translate_dictionary(definition_string):
    """
    Translate one specific dictionary definition from using {} to using dict()

    Args:
        definition_string (str):    A string with a dictionary definition
                                    (including '=' beforehand)

    Returns:
        str: An equivalent definition (including '='), but using the
        dict()-contructor instead of { and }
    """
    # Remove = before definition
    definition_string = re.sub(r"\s*=\s*", "", definition_string)

    # Remove { and }
    definition_string = re.sub(r"[{}]", "", definition_string)

    # Remove newlines
    definition_string = re.sub(r"\s*\n\s*", "", definition_string)

    # Find all pairs
    pairs = re.split(r"\s*,\s*", definition_string)

    # Convert each pair to a tuple definition
    result_inner = ""
    for pair in pairs:
        if pair.strip() == "":
            continue
        key, value = re.split(r"\s*:\s*", pair)

        if result_inner == "":
            result_inner = "(%s, %s)" % (key, value)

        else:
            result_inner += ", (%s, %s)" % (key, value)

    if result_inner == "":
        return "= dict()"
    else:
        return "= dict([%s])" % result_inner


def pre_reverse_parse(infile_string):
    """
    Perform some necessary changes to the file before reverse parsing can ensue.
    This include changing dict definitions to include

    Args:
        infile_string (str):    A string containing the whole python source

    Returns:
        str: The source with changes to dictionary definitions
    """
    dictionaries = re.findall(
        r"=\s*{\s*(?:.+\s*:\s*.+(?:\s*,\s*)?)*\s*}", infile_string
    )

    for dictionary in dictionaries:
        infile_string = re.sub(
            dictionary, translate_dictionary(dictionary), infile_string
        )

    return infile_string


def safe_substitute(value, deescaped_key, line):
    """
    Performs Python token substitution on a Pygyat line, but ignores tokens inside of strings.
    TODO: Can be extended to ignore tokens inside of comments as well.

    Args:
        value (str):             Pygyat token
        deescaped_key (str):     Python token
        line (str):              Code line

    Returns:
        Code line with safe Python token substitutions
    """
    string_pattern = r"""
        (?P<string>(['"])(?:\\.|(?!\2).)*\2)  # Match single or double-quoted strings
    """

    def replace_callback(match):
        if match.group("string"):
            return match.group(0)
        else:
            return re.sub(
                rf'(?<!["\'#])\b{re.escape(value)}\b(?!["\'])',
                f"{deescaped_key}_is_not_valid_python",
                match.group(0)
            )

    return re.sub(string_pattern, replace_callback, line)


def token_is_f_string(tok):
    """
    Checks if a given token is an f-string

    Args:
        tok (tokenize.TokenInfo):   token to check

    Returns:
        bool: if the token is an f-string token
    """
    # starting in 3.12 fstrings are tokenized differently so the parts will be tokenized as the token type
    return (
        platform.python_version_tuple() < ("3", "12")
        and tok.type == token.STRING
        and bool(
            re.match(
                r"^\w*?f\w*?[\"']", tok.string, flags=re.RegexFlag.IGNORECASE
            )
        )
    )


_f_str_split_re = re.compile(
    r"([{}:=!])|"
    + "({})".format("|".join(re.escape(t) for t in GYAT2PY_MAPPINGS.values()))
)


def reverse_parse_f_string(s):
    """
    Reverse Parsing for f-strings

    Leaves quoted portions as is, changes values in braces

    Args:
        s (str):    quoted f-string as from tokenize.TokenInfo.string

    Returns:
        str: reverse parsed quoted f-string
    """

    split = _f_str_split_re.split(s)

    inside_f_expr = False
    with io.StringIO() as outstr:

        for substr in split:
            if substr is None:
                continue

            if substr == "{":
                inside_f_expr = True
            elif substr in ("!", ":", "=", "}"):
                inside_f_expr = False

            if inside_f_expr:
                substr = reverse_parse_token(
                    substr,
                    match_function=re.match,
                    escape_function=re.escape,
                    format_string=r"\b{}\b",
                )

            outstr.write(substr)

        return outstr.getvalue()


def reverse_parse_token(
    token,
    *,
    match_function=operator.eq,
    format_string="{}",
    escape_function=lambda x: x,
):
    """
    Reverse parses a token

    Args:
        token (str | tokenize.TokenInfo): token to reverse parse
        match_function (Callable[[str,str], Any]): Function to match python token against pygyat token
        format_string (str): string to use to format the python token for matching
        escape_function (Callable[[str], str]): function to escape python token for matching

    Returns:
        str: the reverse parsed token
    """
    if isinstance(token, tokenize.TokenInfo):
        s = token.string
    elif isinstance(token, str):
        s = token
    else:
        raise TypeError(f"token of type {type(token)}")

    for key, value in GYAT2PY_MAPPINGS.items():
        if re.match(key, s):  # if it is a pygyat keyword
            s = re.sub(
                key,
                "{}_is_not_valid_pygyat".format(s),
                s,
            )

            break
        elif match_function(format_string.format(escape_function(value)), s):
            deescaped_key = key.replace(r"\s+", " ")

            s = re.sub(
                format_string.format(re.escape(value)),
                deescaped_key,
                s,
                count=1,
            )

            break

    return s


def reverse_parse(filename, outputname):
    """
    Changes a Python file to a PyGyat file

    All semantically significant whitespace resulting in a change
    in indentation levels will have a matching opening or closing
    curly-brace.

    Args:
        filename (str):     Path of file to parse
        outputname (str):   Path of destination file
    """

    def _reverse_parse(tokens):
        previous_token = None
        ESCAPED_MAPPINGS = {
            k.replace(r"\s+", " "): v for k, v in GYAT2PY_MAPPINGS.items()
        }
        for tok in tokens:
            if (
                previous_token is not None
                and previous_token.end[1] == tok.start[1]
                and (
                    (
                        tok.type == token.OP
                        and tok.string in GYAT2PY_MAPPINGS.values()
                    )
                    or (
                        previous_token.type == token.OP
                        and previous_token.string.lstrip()
                        in ESCAPED_MAPPINGS.keys()
                    )
                )
            ):
                # to add space when operators are right against other tokens. Example '1+2' should become '1 rizz 2' not '1rizz2' (which the parser does not handle)
                s = tok.string.rjust(len(tok.string) + 1)
            else:
                s = tok.string

            if token_is_f_string(tok):
                s = reverse_parse_f_string(s)
            else:
                if tok.type == token.OP:
                    format_string = "{}"
                    match_function = operator.eq
                    escape_function = lambda x: x
                else:
                    format_string = r"\b{}\b"
                    match_function = re.search
                    escape_function = re.escape
                    
                s = reverse_parse_token(
                    s,
                    format_string=format_string,
                    match_function=match_function,
                    escape_function=escape_function,
                )

            tok = tokenize.TokenInfo(
                type=tok.type,
                string=s,
                start=tok.start,
                end=tok.end,
                line="",  # untokenize does not look at line
            )

            yield tok
            previous_token = tok

    with tokenize.open(filename) as infile, open(outputname, "w") as outfile:
        tokens = tokenize.generate_tokens(infile.readline)

        outfile.write(tokenize.untokenize(_reverse_parse(tokens)))


def main():
    """
    Translate python to pygyat

    Command line utility and Python module for translating python code
    to pygyat code, adding curly braces at semantically significant
    indentations.
    """
    argparser = argparse.ArgumentParser(
        "py2gyat",
        description="py2gyat translates python to pygyat",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    argparser.add_argument(
        "-v",
        "--version",
        action="version",
        version="py2gyat is a part of PyGyat v%s\nShamith Pasula 2024" % VERSION_NUMBER,
    )
    argparser.add_argument(
        "-o", "--output", type=str, help="specify name of output file", nargs=1
    )
    argparser.add_argument("input", type=str, help="python file to translate", nargs=1)

    cmd_args = argparser.parse_args()

    logger = Logger()

    try:
        outputname = (
            cmd_args.output[0]
            if cmd_args.output is not None
            else change_file_name(cmd_args.input[0], None)
        )

        infile = open(cmd_args.input[0], "r")
        infile_string = "".join(infile.readlines())

        # pre_parsed = pre_reverse_parse(infile_string)
        tempoutfile = open(cmd_args.input[0] + ".py2gyattemp", "w")
        # tempoutfile.write(pre_parsed)
        tempoutfile.write(infile_string)
        tempoutfile.close()

        reverse_parse(cmd_args.input[0] + ".py2gyattemp", outputname)

        os.remove(cmd_args.input[0] + ".py2gyattemp")

    except FileNotFoundError:
        logger.log_error("No file named %s" % cmd_args.input[0])

    except Exception as e:
        logger.log_error("Unexpected error: %s" % str(e))
        sys.exit(1)


if __name__ == "__main__":
    main()
